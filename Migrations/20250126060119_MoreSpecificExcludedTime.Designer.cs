// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsScheduleProLibrary.Data;

namespace SportsScheduleProLibrary.Migrations
{
    [DbContext(typeof(SportsScheduleProDataContext))]
    [Migration("20250126060119_MoreSpecificExcludedTime")]
    partial class MoreSpecificExcludedTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AlertAlertContact", b =>
                {
                    b.Property<int>("AlertContactsPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlertsAlertId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlertContactsPersonId", "AlertsAlertId");

                    b.HasIndex("AlertsAlertId");

                    b.ToTable("AlertAlertContact");
                });

            modelBuilder.Entity("AlertContactPlayer", b =>
                {
                    b.Property<int>("AlertContactsPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayersPersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlertContactsPersonId", "PlayersPersonId");

                    b.HasIndex("PlayersPersonId");

                    b.ToTable("AlertContactPlayer");
                });

            modelBuilder.Entity("CoachPlayer", b =>
                {
                    b.Property<int>("CoachesPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayersPersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoachesPersonId", "PlayersPersonId");

                    b.HasIndex("PlayersPersonId");

                    b.ToTable("CoachPlayer");
                });

            modelBuilder.Entity("CoachTeam", b =>
                {
                    b.Property<int>("CoachesPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamsTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoachesPersonId", "TeamsTeamId");

                    b.HasIndex("TeamsTeamId");

                    b.ToTable("CoachTeam");
                });

            modelBuilder.Entity("FieldLeague", b =>
                {
                    b.Property<int>("FieldsFieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaguesLeagueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FieldsFieldId", "LeaguesLeagueId");

                    b.HasIndex("LeaguesLeagueId");

                    b.ToTable("FieldLeague");
                });

            modelBuilder.Entity("FieldTournament", b =>
                {
                    b.Property<int>("FieldsFieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentsTournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FieldsFieldId", "TournamentsTournamentId");

                    b.HasIndex("TournamentsTournamentId");

                    b.ToTable("FieldTournament");
                });

            modelBuilder.Entity("LeagueReferee", b =>
                {
                    b.Property<int>("LeaguesLeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RefereesPersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaguesLeagueId", "RefereesPersonId");

                    b.HasIndex("RefereesPersonId");

                    b.ToTable("LeagueReferee");
                });

            modelBuilder.Entity("LeagueSeason", b =>
                {
                    b.Property<int>("LeaguesLeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonsSeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaguesLeagueId", "SeasonsSeasonId");

                    b.HasIndex("SeasonsSeasonId");

                    b.ToTable("LeagueSeason");
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.Property<int>("PlayersPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamsTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayersPersonId", "TeamsTeamId");

                    b.HasIndex("TeamsTeamId");

                    b.ToTable("PlayerTeam");
                });

            modelBuilder.Entity("RefereeSeason", b =>
                {
                    b.Property<int>("RefereesPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonsSeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RefereesPersonId", "SeasonsSeasonId");

                    b.HasIndex("SeasonsSeasonId");

                    b.ToTable("RefereeSeason");
                });

            modelBuilder.Entity("SeasonTeam", b =>
                {
                    b.Property<int>("SeasonsSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamsTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SeasonsSeasonId", "TeamsTeamId");

                    b.HasIndex("TeamsTeamId");

                    b.ToTable("SeasonTeam");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AlertDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.HasKey("AlertId");

                    b.HasIndex("ClubId");

                    b.ToTable("Alert");

                    b.HasData(
                        new
                        {
                            AlertId = 1,
                            AlertDate = new DateTime(2025, 1, 26, 0, 1, 18, 289, DateTimeKind.Local).AddTicks(3512),
                            IsDeleted = false,
                            Message = "Weather alert - Fields will be closed due to inclement weather."
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.AlertContact", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PreferredContactMethod")
                        .HasColumnType("INTEGER");

                    b.HasKey("PersonId");

                    b.ToTable("AlertContact");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            ContactEmail = "timothylindsay.ns1@gmail.com",
                            ContactPhone = "3182451296",
                            IsDeleted = false,
                            Name = "Timothy Lindsay",
                            PreferredContactMethod = 2
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ClubId");

                    b.ToTable("Club");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            IsDeleted = false,
                            Name = "NELSA"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Coach", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Coach");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            ContactEmail = "timothylindsay.ns1@gmail.com",
                            ContactPhone = "3182451296",
                            IsDeleted = false,
                            Name = "Timothy Lindsay"
                        },
                        new
                        {
                            PersonId = 2,
                            IsDeleted = false,
                            Name = "Doug Smith"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Director", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.HasIndex("ClubId");

                    b.ToTable("Director");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            IsDeleted = false,
                            Name = "Nick Artigue"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.ExcludedGameDate", b =>
                {
                    b.Property<int>("ExcludedGameDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExcludedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExcludedTimeEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExcludedTimeStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExcludedGameDateId");

                    b.HasIndex("TeamId");

                    b.ToTable("ExcludedGameDate");

                    b.HasData(
                        new
                        {
                            ExcludedGameDateId = 1,
                            ExcludedDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasLights")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenFriday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenMonday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenSaturday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenSunday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenThursday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenTuesday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenWednesday")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldId");

                    b.HasIndex("ClubId");

                    b.HasIndex("LocationId");

                    b.ToTable("Field");

                    b.HasData(
                        new
                        {
                            FieldId = 1,
                            HasLights = false,
                            IsDeleted = false,
                            IsOpenFriday = true,
                            IsOpenMonday = true,
                            IsOpenSaturday = true,
                            IsOpenSunday = true,
                            IsOpenThursday = true,
                            IsOpenTuesday = true,
                            IsOpenWednesday = true,
                            Name = "NELSA"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChosenScheduleTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.HasIndex("FieldId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgeGroupEarliestDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgeGroupLatestDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AlertId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyGamesPerFieldSaturday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyGamesPerFieldSunday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyGamesPerFieldWeekday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EarliestGameTimeHourSaturday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EarliestGameTimeHourSunday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EarliestGameTimeHourWeekday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EarliestGameTimeMinuteSaturday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EarliestGameTimeMinuteSunday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EarliestGameTimeMinuteWeekday")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameLengthWindow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayEachTimeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("LeagueId");

                    b.HasIndex("AlertId");

                    b.HasIndex("ClubId");

                    b.ToTable("League");

                    b.HasData(
                        new
                        {
                            LeagueId = 1,
                            AgeGroup = "9-10",
                            AgeGroupEarliestDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AgeGroupLatestDate = new DateTime(2016, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DailyGamesPerFieldSaturday = 3,
                            DailyGamesPerFieldSunday = 1,
                            DailyGamesPerFieldWeekday = 1,
                            EarliestGameTimeHourSaturday = 9,
                            EarliestGameTimeHourSunday = 13,
                            EarliestGameTimeHourWeekday = 17,
                            EarliestGameTimeMinuteSaturday = 0,
                            EarliestGameTimeMinuteSunday = 0,
                            EarliestGameTimeMinuteWeekday = 45,
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameLengthWindow = 90,
                            Gender = "Male",
                            IsDeleted = false,
                            Name = "2015-2016 Boys Recreational",
                            PlayEachTimeCount = 1,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenFriday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenMonday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenSaturday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenSunday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenThursday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenTuesday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenWednesday")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.HasIndex("ClubId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            IsDeleted = false,
                            IsOpenFriday = true,
                            IsOpenMonday = true,
                            IsOpenSaturday = true,
                            IsOpenSunday = true,
                            IsOpenThursday = true,
                            IsOpenTuesday = true,
                            IsOpenWednesday = true,
                            Name = "NELSA (Chennault)"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Player", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Player");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            ContactEmail = "timothylindsay.ns1@gmail.com",
                            ContactPhone = "3182451296",
                            IsDeleted = false,
                            Name = "Micah Lindsay"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Referee", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Referee");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenFriday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenMonday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenSaturday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenSunday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenThursday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenTuesday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenWednesday")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("SeasonId");

                    b.HasIndex("ClubId");

                    b.ToTable("Season");

                    b.HasData(
                        new
                        {
                            SeasonId = 1,
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsOpenFriday = true,
                            IsOpenMonday = true,
                            IsOpenSaturday = true,
                            IsOpenSunday = true,
                            IsOpenThursday = true,
                            IsOpenTuesday = true,
                            IsOpenWednesday = true,
                            StartDate = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShirtColorChosen")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortsColorChosen")
                        .HasColumnType("TEXT");

                    b.HasKey("TeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            IsDeleted = false,
                            Name = "Smith/Lindsay",
                            ShirtColorChosen = "Navy Striped",
                            ShortsColorChosen = "Black"
                        });
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DirectorPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TournamentName")
                        .HasColumnType("TEXT");

                    b.HasKey("TournamentId");

                    b.HasIndex("DirectorPersonId");

                    b.HasIndex("LocationId");

                    b.ToTable("Tournament");

                    b.HasData(
                        new
                        {
                            TournamentId = 1,
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TournamentName = "End of Season Recreational"
                        });
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.Property<int>("TeamsTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentsTournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamsTeamId", "TournamentsTournamentId");

                    b.HasIndex("TournamentsTournamentId");

                    b.ToTable("TeamTournament");
                });

            modelBuilder.Entity("AlertAlertContact", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.AlertContact", null)
                        .WithMany()
                        .HasForeignKey("AlertContactsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Alert", null)
                        .WithMany()
                        .HasForeignKey("AlertsAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlertContactPlayer", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.AlertContact", null)
                        .WithMany()
                        .HasForeignKey("AlertContactsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoachPlayer", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Coach", null)
                        .WithMany()
                        .HasForeignKey("CoachesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoachTeam", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Coach", null)
                        .WithMany()
                        .HasForeignKey("CoachesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldLeague", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.League", null)
                        .WithMany()
                        .HasForeignKey("LeaguesLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldTournament", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeagueReferee", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.League", null)
                        .WithMany()
                        .HasForeignKey("LeaguesLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Referee", null)
                        .WithMany()
                        .HasForeignKey("RefereesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeagueSeason", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.League", null)
                        .WithMany()
                        .HasForeignKey("LeaguesLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefereeSeason", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Referee", null)
                        .WithMany()
                        .HasForeignKey("RefereesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeasonTeam", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Alert", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Director", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Club", "Club")
                        .WithMany("Directors")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.ExcludedGameDate", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Team", "Team")
                        .WithMany("ExcludedGameDates")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Field", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Club", "Club")
                        .WithMany("Fields")
                        .HasForeignKey("ClubId");

                    b.HasOne("SportsScheduleProLibrary.Models.Location", "Location")
                        .WithMany("Fields")
                        .HasForeignKey("LocationId");

                    b.Navigation("Club");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Game", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Field", "Field")
                        .WithMany("Games")
                        .HasForeignKey("FieldId");

                    b.HasOne("SportsScheduleProLibrary.Models.League", "League")
                        .WithMany("Games")
                        .HasForeignKey("LeagueId");

                    b.HasOne("SportsScheduleProLibrary.Models.Team", null)
                        .WithMany("Games")
                        .HasForeignKey("TeamId");

                    b.Navigation("Field");

                    b.Navigation("League");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.League", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Alert", null)
                        .WithMany("Leagues")
                        .HasForeignKey("AlertId");

                    b.HasOne("SportsScheduleProLibrary.Models.Club", "Club")
                        .WithMany("Leagues")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Location", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Club", "Club")
                        .WithMany("Locations")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Season", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Club", "Club")
                        .WithMany("Seasons")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Team", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Tournament", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Director", "Director")
                        .WithMany("Tournaments")
                        .HasForeignKey("DirectorPersonId");

                    b.HasOne("SportsScheduleProLibrary.Models.Location", "Location")
                        .WithMany("Tournaments")
                        .HasForeignKey("LocationId");

                    b.Navigation("Director");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.HasOne("SportsScheduleProLibrary.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsScheduleProLibrary.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Alert", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Club", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("Fields");

                    b.Navigation("Leagues");

                    b.Navigation("Locations");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Director", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Field", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.League", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Location", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("SportsScheduleProLibrary.Models.Team", b =>
                {
                    b.Navigation("ExcludedGameDates");

                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
